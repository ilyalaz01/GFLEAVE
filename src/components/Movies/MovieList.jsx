// src/components/Movies/MovieList.jsx
import React, { useState, useEffect } from 'react';
import { loadMovies, deleteMovie, saveMovie } from '../../firebase/firebaseUtils';
import AddMovieModal from './AddMovieModal';
import EditMovieModal from './EditMovieModal';
import LoadingSpinner from '../Common/LoadingSpinner';
import { Trash2, Edit, Star, Calendar, Eye, Clock } from 'lucide-react';
import { useAuth } from '../../context/AuthContext';

const MovieList = () => {
  const [movies, setMovies] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [editingMovie, setEditingMovie] = useState(null);
  const { currentUser } = useAuth();

  useEffect(() => {
    loadMoviesData();
  }, []);

  const loadMoviesData = async () => {
    try {
      const movieData = await loadMovies();
      
      // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ñ–∏–ª—å–º–æ–≤ –ø–æ ID
      const uniqueMovies = movieData.reduce((acc, movie) => {
        const movieId = movie.id || movie.firestoreId;
        if (!acc.find(m => (m.id || m.firestoreId) === movieId)) {
          acc.push(movie);
        }
        return acc;
      }, []);
      
      setMovies(uniqueMovies);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å–º–æ–≤:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleMovieAdded = () => {
    loadMoviesData();
    setShowAddModal(false);
  };

  const handleMovieUpdated = () => {
    loadMoviesData();
    setShowEditModal(false);
    setEditingMovie(null);
  };

  const handleDeleteMovie = async (movieId) => {
    if (window.confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å–º –∏–∑ —Å–ø–∏—Å–∫–∞?')) {
      try {
        await deleteMovie(movieId);
        setMovies(movies.filter(movie => movie.id !== movieId));
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞');
      }
    }
  };

  const handleEditMovie = (movie) => {
    setEditingMovie(movie);
    setShowEditModal(true);
  };

  const handleQuickStatusChange = async (movie) => {
    try {
      console.log('–ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∏–ª—å–º–∞:', movie);
      
      const newStatus = movie.status === 'planned' ? 'watched' : 'planned';
      const movieId = movie.id || movie.firestoreId;
      
      if (!movieId) {
        console.error('ID —Ñ–∏–ª—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω:', movie);
        alert('‚ùå –û—à–∏–±–∫–∞: ID —Ñ–∏–ª—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
      const { collection, doc, getDoc, updateDoc, setDoc } = await import('firebase/firestore');
      const { db } = await import('../../firebase/config');
      
      const movieRef = doc(db, 'movies', movieId);
      const movieSnap = await getDoc(movieRef);
      
      const updateData = {
        ...movie,
        status: newStatus,
        updatedBy: currentUser,
        updatedAt: new Date().toISOString()
      };
      
      if (newStatus === 'watched') {
        updateData.watchedDate = new Date().toISOString();
      } else {
        updateData.rating = null;
        updateData.review = '';
        updateData.watchedDate = null;
      }

      if (movieSnap.exists()) {
        // –î–æ–∫—É–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º
        await updateDoc(movieRef, updateData);
      } else {
        // –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        console.log('–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π');
        await setDoc(movieRef, updateData);
      }
      
      loadMoviesData();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ' + error.message);
    }
  };

  const renderStars = (rating) => {
    if (!rating) return null;
    
    return (
      <div className="movie-rating">
        {[...Array(10)].map((_, i) => (
          <Star
            key={i}
            size={16}
            className={i < rating ? 'star-filled' : 'star-empty'}
          />
        ))}
        <span className="rating-number">{rating}/10</span>
      </div>
    );
  };

  const getMoviePoster = (title) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –≤–º–µ—Å—Ç–æ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    const colors = ['ff6b9d', 'c471ed', '667eea', 'f093fb', 'f5576c', '4facfe'];
    const colorIndex = title.length % colors.length;
    const color = colors[colorIndex];
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    const canvas = document.createElement('canvas');
    canvas.width = 300;
    canvas.height = 450;
    const ctx = canvas.getContext('2d');
    
    // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
    const gradient = ctx.createLinearGradient(0, 0, 300, 450);
    gradient.addColorStop(0, `#${color}`);
    gradient.addColorStop(1, `#${color}88`);
    
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, 300, 450);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    ctx.fillStyle = 'white';
    ctx.font = 'bold 24px Arial';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    const words = title.split(' ');
    const lines = [];
    let currentLine = '';
    
    words.forEach(word => {
      const testLine = currentLine + word + ' ';
      if (ctx.measureText(testLine).width > 250 && currentLine !== '') {
        lines.push(currentLine.trim());
        currentLine = word + ' ';
      } else {
        currentLine = testLine;
      }
    });
    lines.push(currentLine.trim());
    
    // –†–∏—Å—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞
    const lineHeight = 30;
    const startY = 225 - (lines.length - 1) * lineHeight / 2;
    
    lines.forEach((line, index) => {
      ctx.fillText(line, 150, startY + index * lineHeight);
    });
    
    return canvas.toDataURL();
  };

  if (loading) {
    return <LoadingSpinner message="üé¨ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤..." />;
  }

  // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å–º–æ–≤
  const uniqueMovies = movies.reduce((acc, movie) => {
    const movieId = movie.id || movie.firestoreId;
    const existingMovie = acc.find(m => (m.id || m.firestoreId) === movieId);
    
    if (!existingMovie) {
      acc.push(movie);
    } else {
      // –ï—Å–ª–∏ —Ñ–∏–ª—å–º —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–º–∏ (–±–µ—Ä–µ–º –±–æ–ª–µ–µ —Å–≤–µ–∂–∏–π)
      const existingIndex = acc.findIndex(m => (m.id || m.firestoreId) === movieId);
      if (movie.updatedAt && (!existingMovie.updatedAt || movie.updatedAt > existingMovie.updatedAt)) {
        acc[existingIndex] = movie;
      }
    }
    
    return acc;
  }, []);

  const plannedMovies = uniqueMovies.filter(movie => movie.status === 'planned');
  const watchedMovies = uniqueMovies.filter(movie => movie.status === 'watched');

  return (
    <>
      <div className="movies-header">
        <button 
          className="add-button" 
          onClick={() => setShowAddModal(true)}
        >
          ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º
        </button>
        
        <div className="movies-stats">
          <div className="stat-item">
            <Clock size={20} />
            <span>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {plannedMovies.length}</span>
          </div>
          <div className="stat-item">
            <Eye size={20} />
            <span>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: {watchedMovies.length}</span>
          </div>
        </div>
      </div>

              {uniqueMovies.length === 0 ? (
        <div className="empty-state">
          <h3>üé¨ –ü–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –≤ —Å–ø–∏—Å–∫–µ</h3>
          <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</p>
        </div>
      ) : (
        <div className="movies-sections">
          {/* –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã */}
          {plannedMovies.length > 0 && (
            <div className="movies-section">
              <h2 className="section-title">
                <Clock size={24} />
                –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ({plannedMovies.length})
              </h2>
              <div className="movie-grid">
                {plannedMovies.map((movie, index) => {
                  const uniqueKey = `planned-${movie.id || movie.firestoreId}-${movie.createdAt || index}`;
                  return (
                    <div key={uniqueKey} className="movie-card planned">
                    <div className="movie-poster">
                      <img 
                        src={movie.posterUrl || getMoviePoster(movie.title)} 
                        alt={movie.title}
                        onError={(e) => {
                          e.target.src = getMoviePoster(movie.title);
                        }}
                      />
                      <div className="movie-overlay">
                        <button 
                          className="quick-action-btn"
                          onClick={() => handleQuickStatusChange(movie)}
                          title="–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π"
                        >
                          <Eye size={20} />
                        </button>
                      </div>
                    </div>
                    
                    <div className="movie-info">
                      <h3 className="movie-title">{movie.title}</h3>
                      <div className="movie-meta">
                        <span className="movie-status status-planned">
                          –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω
                        </span>
                        {movie.genre && (
                          <span className="movie-genre">{movie.genre}</span>
                        )}
                      </div>
                      
                      <div className="movie-actions">
                        <button 
                          className="btn-icon btn-edit"
                          onClick={() => handleEditMovie(movie)}
                          title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                        >
                          <Edit size={16} />
                        </button>
                        <button 
                          className="btn-icon btn-delete"
                          onClick={() => handleDeleteMovie(movie.id || movie.firestoreId)}
                          title="–£–¥–∞–ª–∏—Ç—å"
                        >
                          <Trash2 size={16} />
                        </button>
                      </div>
                      
                      <p className="movie-added">
                        –î–æ–±–∞–≤–∏–ª: {movie.addedBy || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                      </p>
                    </div>
                                      </div>
                  );
                })}
              </div>
            </div>
          )}

          {/* –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã */}
          {watchedMovies.length > 0 && (
            <div className="movies-section">
              <h2 className="section-title">
                <Eye size={24} />
                –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ ({watchedMovies.length})
              </h2>
              <div className="movie-grid">
                {watchedMovies.map((movie, index) => {
                  const uniqueKey = `watched-${movie.id || movie.firestoreId}-${movie.createdAt || index}`;
                  return (
                    <div key={uniqueKey} className="movie-card watched">
                    <div className="movie-poster">
                      <img 
                        src={movie.posterUrl || getMoviePoster(movie.title)} 
                        alt={movie.title}
                        onError={(e) => {
                          e.target.src = getMoviePoster(movie.title);
                        }}
                      />
                      <div className="movie-overlay">
                        <button 
                          className="quick-action-btn"
                          onClick={() => handleQuickStatusChange(movie)}
                          title="–í–µ—Ä–Ω—É—Ç—å –≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ"
                        >
                          <Clock size={20} />
                        </button>
                      </div>
                    </div>
                    
                    <div className="movie-info">
                      <h3 className="movie-title">{movie.title}</h3>
                      <div className="movie-meta">
                        <span className="movie-status status-watched">
                          –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω
                        </span>
                        {movie.watchedDate && (
                          <span className="watch-date">
                            <Calendar size={14} />
                            {new Date(movie.watchedDate).toLocaleDateString('ru-RU')}
                          </span>
                        )}
                      </div>
                      
                      {renderStars(movie.rating)}
                      
                      {movie.review && (
                        <p className="movie-review">"{movie.review}"</p>
                      )}
                      
                      <div className="movie-actions">
                        <button 
                          className="btn-icon btn-edit"
                          onClick={() => handleEditMovie(movie)}
                          title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                        >
                          <Edit size={16} />
                        </button>
                        <button 
                          className="btn-icon btn-delete"
                          onClick={() => handleDeleteMovie(movie.id)}
                          title="–£–¥–∞–ª–∏—Ç—å"
                        >
                          <Trash2 size={16} />
                        </button>
                      </div>
                      
                      <p className="movie-added">
                        –î–æ–±–∞–≤–∏–ª: {movie.addedBy || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                      </p>
                    </div>
                                      </div>
                  );
                })}
              </div>
            </div>
          )}
        </div>
      )}

      {showAddModal && (
        <AddMovieModal 
          onClose={() => setShowAddModal(false)}
          onMovieAdded={handleMovieAdded}
        />
      )}

      {showEditModal && editingMovie && (
        <EditMovieModal 
          movie={editingMovie}
          onClose={() => {
            setShowEditModal(false);
            setEditingMovie(null);
          }}
          onMovieUpdated={handleMovieUpdated}
        />
      )}
    </>
  );
};

export default MovieList;